/*
 * Variables used:
 *   LANG_COMPOSED_PKG
 *   START_NONTERMINAL_CLASS
 *   FOLDER_CLASS_QNAME
 *   PARSER_NAME
 *   PKG_NAME
 */
package @LANG_COMPOSED_PKG@;

/**
 * This class invokes the folder function defined in Silver code.
 */
public class Fold {

	/**
	 * Invokes the folder function defined in Silver's IDE declaration block.
	 * <p>
	 * The folder function will inspect the given CST and returns a list of
	 * foldable ranges on the source file, from which the CST has been derived 
	 * as the result of parsing.
	 * 
	 * @param root	The CST returned by IDE parser, see 
	 * {@link @PKG_NAME@.copper.parser.@PARSER_NAME@ @PARSER_NAME@}
	 * 
	 * @return a two-dimensional integer array (int[][2]), each element being 
	 * the pair of indices over which the source code can be folded. The array
     * will never be null.
	 */
	public static int[][] fold(@START_NONTERMINAL_CLASS@ root){
		
		common.ConsCell cc = @FOLDER_CLASS_QNAME@.invoke(root);

		int length = cc.length();		
		int[][] locations = new int[length][2];
		
		//Translate the Silver list into a Java array
		int i = 0;
		while(!cc.nil()){
			core.NLocation loc = (core.NLocation) cc.head();
			
			common.DecoratedNode locDecNode = loc.decorate(common.TopNode.singleton, (common.Lazy[])null);
			
        	Integer startInd = (Integer) locDecNode.synthesized(
            	core.Init.core_index__ON__core_Location);
        
        	Integer endInd = (Integer) locDecNode.synthesized(
            	core.Init.core_endIndex__ON__core_Location);
        	
        	locations[i] = new int[]{startInd, endInd};
			cc = cc.tail();
			i++;
		}
		
		return locations;
	}
	
}
