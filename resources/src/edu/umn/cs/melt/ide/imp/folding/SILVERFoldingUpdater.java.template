/*
 * Variables used:
 *   PKG_NAME
 *   LANG_NAME
 *   PARSER_NAME
 *   START_NONTERMINAL_CLASS
 */
package @PKG_NAME@.imp.folding;

import java.util.HashMap;
import java.util.List;

import org.eclipse.imp.services.base.FolderBase;
import org.eclipse.jface.text.Position;
import org.eclipse.jface.text.source.Annotation;

import @PKG_NAME@.copper.parser.ASTVisitorAdapter;
import @PKG_NAME@.copper.parser.@PARSER_NAME@;
import edu.umn.cs.melt.ide.copper.AdaptiveEnhancedParseTreeInnerNode;

/**
 * The folding updater uses an AST visitor to make annotation on the source code.
 * <p>
 * If no folding is enabled, this class does nothing.
 */
public class @LANG_NAME@FoldingUpdater extends FolderBase {

	private ASTVisitorAdapter visitor = null;//new SourceFoldingVisitor(this);
	
	@SuppressWarnings("unchecked")
	@Override
	protected void sendVisitorToAST(
			HashMap<Annotation, Position> newAnnotations,
			List<Annotation> annotations, Object _ast) {
		AdaptiveEnhancedParseTreeInnerNode<@START_NONTERMINAL_CLASS@> ast = 
			(AdaptiveEnhancedParseTreeInnerNode<@START_NONTERMINAL_CLASS@>) _ast;
		
		if(visitor!=null && ast!=null){
			@PARSER_NAME@.visitASTRoot(ast, visitor);		
		}

	}

}
