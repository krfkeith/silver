Behavior root{
  Behavior straightLine(pBehavior nextBehavior(int c), int count){
	 Entry{
		clock := 0.0; 
		SetRSpeed{100.0}
		SetLSpeed{100.0}
	 }
	
		Under Condition clock > 25.00
			Apply Behavior nextBehavior(count::count)
  }


   Initial Behavior square(int count){	
		Behavior rightCorner(int count){
		
		 Entry{
			clock := 0.0;  
			SetRSpeed{250.0}
			SetLSpeed{25.0}
		 }
	
			Under Condition count == 3 && clock > 7.0
				ExitTo(square) 
			Under Condition clock >7.0 
				Apply Behavior 
				root.straightLine(nextBehavior::square.rightCorner, count::count)
	

		  Exit{
			 count:= count + 1;
		  }
		}

		Under Condition true
		Apply Behavior
			root.straightLine(nextBehavior::square.rightCorner, count::count)
	
		Exit{
			count := count + 1;
		}
   }

   Behavior triangle(int count){

		Behavior triangleCorner(int count){	
			Entry{
				clock := 0.0;  
				SetRSpeed{250.0}
				SetLSpeed{25.0}
			}
	

			Under Condition count > 1 && clock > 15.0
				ExitTo(triangle) 
			Under Condition clock > 15.0
				Apply Behavior
				root.straightLine(nextBehavior::triangle.triangleCorner,
											 count::count)
	

			Exit{
				count := count + 1;
			}	
		}		
	//	Under Condition true
	//	Apply Behavior
	//		root.straightLine(nextBehavior::triangle.triangleCorner, 
		//	count::count)
		Under Condition count < 4
		Apply Behavior
		root.straightLine(nextBehavior::triangle.triangleCorner, 
			count::count)
		//	Apply Behavior triangle(count::count)
		Under Condition count > 4
			Apply Behavior square(count::0)
	
		Exit{
			count:=count+1;
		}
  }
}
