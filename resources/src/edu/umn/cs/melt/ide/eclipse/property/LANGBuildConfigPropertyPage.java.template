/*
 * Variables used:
 *   PKG_NAME
 *   LANG_NAME
 */

package @PKG_NAME@.eclipse.property;

import java.util.Iterator;

import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.imp.runtime.PluginBase;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.ui.dialogs.PropertyPage;

import @PKG_NAME@.imp.@LANG_NAME@Plugin;

/**
 * The Property Page for @LANG_NAME@'s build configuration.
 * <p>
 */
public class @LANG_NAME@BuildConfigPropertyPage extends PropertyPage {
	
	private StructuredViewer tv;
	
	@Override
	protected Control createContents(Composite parent) {	
		//Prepare some layouts to be used in this page
		GridLayout gdLayoutC1 = new GridLayout();
		gdLayoutC1.numColumns = 1;
		
		GridLayout gdLayoutC2 = new GridLayout();
		gdLayoutC2.numColumns = 2;
		
		FillLayout fillLayout = new FillLayout();
		
		//Assembling the page
		
		//1) The outermost container: a tab folder
		TabFolder folder = new TabFolder(parent, SWT.NULL); 
		
		//2) Tab 1: Source
		TabItem item_srcs = new TabItem(folder, SWT.NULL);
		item_srcs.setText("Source");
		Composite panel_srcs = new Composite(folder, SWT.NONE);
		item_srcs.setControl(panel_srcs);
		
		panel_srcs.setLayout(gdLayoutC1);
		panel_srcs.setLayoutData(new GridData(GridData.FILL_HORIZONTAL|GridData.FILL_VERTICAL));
		
		//2.1) row 1: a text
		Label r1_label = new Label(panel_srcs, SWT.NONE);
		r1_label.setText("Source folders on project path:");
	    
		//2.2) row 2: a sub panel
		Composite sub_panel_srcs = new Composite(panel_srcs, SWT.NONE);
		sub_panel_srcs.setLayout(gdLayoutC2);
		sub_panel_srcs.setLayoutData(new GridData(GridData.FILL_HORIZONTAL|GridData.FILL_VERTICAL));
		
		//2.2.1) left side: a tree viewer for source list
		//(Note it's put inside another panel for filling layout)
		Composite panel_3 = new Composite(sub_panel_srcs, SWT.NONE);
		panel_3.setLayoutData(new GridData(GridData.FILL_HORIZONTAL|GridData.FILL_VERTICAL));
		panel_3.setLayout(fillLayout);
		
		//(In fact a ListViewer may be more efficient here, since we only list 
		//folders at first sub-level of a project. TreeViewer is chosen only 
		//because ListViewer doesn't support display of icon)
		tv = new TreeViewer(panel_3, SWT.SINGLE|SWT.BORDER);
		tv.setLabelProvider(new ResourceLabelProvider());
		tv.setContentProvider(new ResourceTreeProvider());
		update();
		tv.addFilter(new ViewerFilter(){// show folder only 
			@Override
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				if(element instanceof IFolder){
					return true;
				}
				return false;
			}
		});
		
		//2.2.2) right side: a list of buttons
		Composite sub_panel_btns = new Composite(sub_panel_srcs, SWT.NONE);
		sub_panel_btns.setLayout(gdLayoutC1);
		sub_panel_btns.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
		
		Button b1_link_src = new Button(sub_panel_btns, SWT.NONE);
		b1_link_src.setText("   Link Source...   ");//
		final Shell shell = parent.getShell();
		b1_link_src.addSelectionListener(new SelectionAdapter(){
			@Override
			public void widgetSelected(SelectionEvent e) {
				LinkSourceWizard wiz = new LinkSourceWizard(
					getProject(), @LANG_NAME@BuildConfigPropertyPage.this);
				WizardDialog dialog = new WizardDialog(shell, wiz);
				
				dialog.open();
			}
		});
		b1_link_src.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		
		final Button b2_remove = new Button(sub_panel_btns, SWT.NONE);
		b2_remove.setText("   Remove   ");//
		b2_remove.addSelectionListener(new SelectionAdapter(){
			@Override
			public void widgetSelected(SelectionEvent e) {
				IStructuredSelection sel = (IStructuredSelection) tv.getSelection();
				
				//The conversion to structured selection and the ensueing iteration
				//adds no extra value when a TreeViewer is in use.
				Iterator<?> iter = sel.iterator();
				while(iter.hasNext()){
					IResource res = (IResource) iter.next();
					try {
						res.delete(true, null);
					} catch (CoreException e1) {
						e1.printStackTrace();
					}
				}
				
				update();
			}
		});
		b2_remove.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		b2_remove.setEnabled(false);
		
		//2.2.1 - cont.) add selection change listener, enable remove button on condition
		tv.addSelectionChangedListener(new ISelectionChangedListener(){
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				IStructuredSelection sel = (IStructuredSelection) event.getSelection();
				
				boolean removeable = true;
				//The conversion to structured selection and the ensueing iteration
				//adds no extra value when a TreeViewer is in use.
				Iterator<?> iter = sel.iterator();
				while(iter.hasNext()){
					IResource res = (IResource) iter.next();
					if(!res.isLinked()){
						removeable = false;
						break;
					}
				}
				
				if(removeable){
					b2_remove.setEnabled(true);
				} else {
					b2_remove.setEnabled(false);				
				}
			}
		});
		
		return folder;
	}
	
	/**
	 * Just a dummy implementation since we don't really support a tree structure.
	 */
	private static class ResourceTreeProvider 
		extends ArrayContentProvider implements ITreeContentProvider {

		@Override
		public Object[] getChildren(Object parentElement) {
			return null;
		}

		@Override
		public Object getParent(Object element) {
			return null;
		}

		@Override
		public boolean hasChildren(Object element) {
			return false;
		}
	}
	
	private static class ResourceLabelProvider extends LabelProvider {
		
		private static final ImageDescriptor FLDR = 
			PluginBase.imageDescriptorFromPlugin(@LANG_NAME@Plugin.kPluginID, "icons/fldr_obj.gif");
		
		private static final ImageDescriptor LINK = 
			PluginBase.imageDescriptorFromPlugin(@LANG_NAME@Plugin.kPluginID, "icons/link_obj.gif");
		
		private static Image FLDR_IMG;
		
		private static Image LINK_IMG;
		
		@Override
		public Image getImage(Object resource){
			IResource res = (IResource) resource;
			
			if(!res.isLinked()){
				if(FLDR_IMG==null){
					FLDR_IMG = FLDR.createImage();
				}
				return FLDR_IMG;
			}
			
			if(LINK_IMG==null){
				LINK_IMG = LINK.createImage();
			}
			return LINK_IMG;
		}
		
		@Override
		public String getText(Object resource){
			IResource res = (IResource) resource;
			return res.getName();
		}
	}
	
	
	@Override
	public boolean performOk(){
		//Do nothing
		return true;
	}
	
	@Override
	public void performDefaults(){
		//Do nothing
	}
	
	private IProject getProject(){
		return (IProject) getElement().getAdapter(IProject.class);
	}
	
	private IResource[] getProjectResources(){
		IProject project = getProject();
		try {
			return project.members();
		} catch (CoreException e) {
			e.printStackTrace();
		}
		
		return new IResource[0];
	}
	
	void update(){
		tv.setInput(getProjectResources());
	}

}
