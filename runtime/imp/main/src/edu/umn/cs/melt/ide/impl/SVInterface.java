package edu.umn.cs.melt.ide.impl;

import ide.NIdeEnv;
import common.ConsCell;
import common.Node;
import core.NIOVal;

/**
 * This interface is implemented by two classes:
 *   1. The SVDefault class next door.
 *   2. The implementation for a language plugin generated by silver. 
 *
 * This is pretty much nothing but a collection of function pointers to silver functions.
 * They should appear in the ide plugin declaration in the silver source file.
 */
public interface SVInterface {
	/**
	 * Gets the language name, i.e. that used in the IMP language registry.
	 * 
	 * @see org.eclipse.imp.language.Language
	 * @see org.eclipse.imp.language.LanguageRegistry
	 */
	public String name();
	
	/**
	 * Gets the name of the problem marker for this extension.
	 */
	public String markerErrorName();
	
	/**
	 * IOVal<[IdeMessage]> ::= [IdeProperty] IO
	 * 
	 * Run when a build action is requested. e.g. a file is saved, if auto-build is on.
	 * 
	 * @param properties  The IDE project properties.
	 * @param iotoken  An input IO token.
	 * @return An IO object that contains a list of error messages to raise.
	 */
	public NIOVal build(ConsCell properties, NIdeEnv env, Object iotoken); 

	/**
	 * IOVal<[IdeMessage]> ::= [IdeProperty] IO
	 * 
	 * <p>Run when a build action *has succeeded without errors*.
	 * 
	 * <p>Why do we bother with this? In order to report errors to the user faster.
	 * 'build' can return empty list, the user's red-squigglies are updated, then this is run to
	 * actually accomplish longer running stuff in the build.
	 * 
	 * <p>An entirely valid implementation does nothing.
	 * 
	 * @param properties  The IDE project properties.
	 * @param iotoken  An input IO token.
	 * @return An IO object that contains a list of error messages to raise.
	 */
	public NIOVal postbuild(ConsCell properties, NIdeEnv env, Object iotoken);
	
	/**
	 * IOVal<[IdeMessage]> ::= [IdeProperty] IdeEnv IO
	 * 
	 * Run when the user requests an export? (TODO: uh, figure some stuff out here)
	 * 
	 * @param properties  The IDE project properties.
	 * @param env  ???
	 * @param iotoken  An input IO token.
	 * @return  ??? errors exporting? How are they reported?
	 */
	public NIOVal export(ConsCell properties, NIdeEnv env, Object iotoken);
	
	/**
	 * [Location] ::= <<CST root's type>>
	 * 
	 * Given a tree from parsing, return a list of locations that can be folded.
	 * 
	 * @param root  The CST tree
	 * @return  A list of extents that should fold.
	 */
	public ConsCell getFolds(Node root);
}
