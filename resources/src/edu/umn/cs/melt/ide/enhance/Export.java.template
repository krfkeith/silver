/*
 * Variables used:
 *   LANG_COMPOSED_PKG
 *   EXPORTER_CLASS_QNAME
 */
package @LANG_COMPOSED_PKG@;

import ide.NIdeProperty;
import ide.NIdeMessage;
import ide.NIdeEnv;

/**
 * This class invokes the exporter function defined in Silver code.
 */
public class Export {

	/**
     * Invokes the exporter function defined in Silver's IDE declaration block.
     * <p>
	 * @param args		an array of NIdeProperty
     * (corresponding to list of silver nonterminal [ide:IdeProperty])
	 * @param env		NIdeEnv
     * (corresponding to silver nonterminal ide:IdeEnv)
	 * @return          a list of NIdeMessage
     * (corresponding to list of silver nonterminal [ide:IdeMessage])
     */
	public static java.util.List<NIdeMessage> export(NIdeProperty[] args, NIdeEnv env) {
		try {
            common.Node rv = (common.Node) @EXPORTER_CLASS_QNAME@.invoke(cvargs(args), env, null);
			common.DecoratedNode drv = rv.decorate(common.TopNode.singleton, (common.Lazy[])null);

            //Demand the IO token
			drv.synthesized(core.Init.core_io__ON__core_IOVal); 
			
            //Demand the IO value (a NIdeMessage Silver list)
    	    common.ConsCell cc = (common.ConsCell) drv.synthesized(core.Init.core_iovalue__ON__core_IOVal);

			//Translate the Silver list into a Java List
			java.util.List<NIdeMessage> list = new java.util.ArrayList<NIdeMessage>();
			while(!cc.nil()){
				list.add((NIdeMessage) cc.head());
				cc = cc.tail();
			}
			
			return list;
		} catch(Throwable t) {
			common.Util.printStackCauses(t);
			return null;
		}
	}

	//Convert array to cons
	public static common.ConsCell cvargs(NIdeProperty [] args){
		common.ConsCell result = common.ConsCell.nil;
		for(int i = args.length - 1; i >= 0; i --) {
			result = new common.ConsCell(args[i], result);
		}
		return result;
	}

}
