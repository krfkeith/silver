/*
 * Variables used:
 *   PKG_NAME
 *   LANG_NAME
 *   LANG_COMPOSED_PKG
 */
package @PKG_NAME@.imp.actions;

import ide.NIdeEnv;
import ide.NIdeMessage;

import java.util.List;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import @PKG_NAME@.@LANG_NAME@Service;
import @PKG_NAME@.eclipse.console.@LANG_NAME@Console;
import @PKG_NAME@.imp.builders.@LANG_NAME@Builder;
import @PKG_NAME@.imp.builders.Utility;
import edu.umn.cs.melt.ide.silver.misc.Problem;
import edu.umn.cs.melt.ide.silver.property.ProjectProperties;

public class Export@LANG_NAME@ implements IWorkbenchWindowActionDelegate {
	private IProject fProject;

	public Export@LANG_NAME@() {
	}

	public void dispose() {
	}

	public void init(IWorkbenchWindow window) {
	}

	public void run(IAction action) {
		@LANG_NAME@Service service = @LANG_NAME@Service.getInstance();
		
		final NIdeEnv env = service.getEnvironment(fProject);
		
		final ProjectProperties props = service.getProperties(fProject);
		
		Job job = new Job("Exporting @LANG_NAME@ distributable") {
			
			@Override
			protected IStatus run(final IProgressMonitor monitor) {

				final List<NIdeMessage> list = @LANG_COMPOSED_PKG@.Export.export(
					@LANG_NAME@Service.convertToNIdePropertyList(props), env);
				
				boolean success = Utility.renderMessages(list, fProject, EXPORT_HANDLER);
				
				try {
					fProject.refreshLocal(IResource.DEPTH_INFINITE, monitor);
					
					if(success){
						@LANG_NAME@Console.getConsoleLoggingStream().info("Export done.");
					}
				} catch (CoreException e) {
					e.printStackTrace();
				}
				
				return Status.OK_STATUS;
			}
			
		};
		
		job.schedule(); 
		
	}
	
	private Utility.MessageHandler EXPORT_HANDLER = new Utility.DefaultMessageHandler(){
		public void handleProjectProblem(IProject project, int level, String message) {
			switch(level){
			case Problem.ERROR:
				@LANG_NAME@Console.getConsoleLoggingStream().error("[EXPORT ERROR] " + message);
				try {
					IMarker marker = project.createMarker(@LANG_NAME@Builder.PROBLEM_MARKER_ID);
					marker.setAttribute(IMarker.MESSAGE, message);
					marker.setAttribute(IMarker.SEVERITY, level);
				} catch (CoreException e) {
					e.printStackTrace();
				}
				break;
			case Problem.WARNING:
				@LANG_NAME@Console.getConsoleLoggingStream().error("[EXPORT WARNING] " + message);
				try {
					IMarker marker = project.createMarker(@LANG_NAME@Builder.PROBLEM_MARKER_ID);
					marker.setAttribute(IMarker.MESSAGE, message);
					marker.setAttribute(IMarker.SEVERITY, level);
				} catch (CoreException e) {
					e.printStackTrace();
				}
				break;		
			default:
				@LANG_NAME@Console.getConsoleLoggingStream().info("[BUILD INFO] " + message);
			}
		}
	};

	public void selectionChanged(IAction action, ISelection selection) {
		if (selection instanceof IStructuredSelection) {
			IStructuredSelection ss = (IStructuredSelection) selection;
			Object first = ss.getFirstElement();

			if (first instanceof IProject) {
				fProject = (IProject) first;
			} else if (first instanceof IJavaProject) {
				fProject = ((IJavaProject) first).getProject();
			}
		}
	}
}
