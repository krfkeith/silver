/*
 * Variables used:
 *   PKG_NAME
 *   LANG_NAME
 */
package @PKG_NAME@.imp.builders;

import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IProgressMonitor;

import edu.umn.cs.melt.ide.silver.misc.ConsoleLoggingStream;

/**
 * A two-stage delegate builder for @LANG_NAME@.
 * <p>
 * A new build is activated on a file containing @LANG_NAME@ code every time 
 * it's saved since last change (when "Build automatically" is on), or when 
 * the programmer chooses to "Build" a project manually from the Eclipse menu.
 * <p>
 * When the method {@link @LANG_NAME@Builder#build(int, Map, IProgressMonitor)} is 
 * invoked, it first parses all the affected source files to see if there is any 
 * syntactic errors; if not, this builder will be invoked.
 * <p>
 * This builder will first calls build() in @LANG_NAME@BuildInvoker, which 
 * returns a message list; if no error is present in the list, postbuild() in
 * @LANG_NAME@PostBuildInvoker will be invoked in a background thread.
 * <p>
 * The build will be completed after @LANG_NAME@PostBuildInvoker returns. If 
 * user intends to initiate another build when current build is underway (by 
 * editing and saving a file, for example), the new build will not be triggered 
 * until the completion of the active one.
 */
public class TwoStageBuilder implements DelegateBuilder {
    
    private @LANG_NAME@BuildInvoker buildInvoker = null;

    private @LANG_NAME@PostBuildInvoker postbuildInvoker = null;

	public IProject[] build(
		@LANG_NAME@Builder builder, 
		ConsoleLoggingStream cls,
		String projectPath,
		int kind, Map args, IProgressMonitor monitor) {
		
    	boolean buildSuccessful = false;
    	//monitor.beginTask("Building @LANG_NAME@ project...", 2);
		
		if(buildInvoker==null){
			buildInvoker = @LANG_NAME@BuildInvoker.getInstance();
		}
		
		//Invoke Build
		buildSuccessful = buildInvoker.build(projectPath, cls, monitor, builder);

		//Cancel the build if stage one failed
		if(!buildSuccessful){
			monitor.setCanceled(true);
			cls.error("Build failed.");
		} else {
			//monitor.worked(1);
			//Otherwise invoke Post-Build 
			if(postbuildInvoker==null){
				postbuildInvoker = @LANG_NAME@PostBuildInvoker.getInstance();
			}
			
			if(pbiThread==null){
				pbiThread = new PostBuildInvokerThread(cls);
			}
			pbiThread.setMonitor(monitor);
			
			new Thread(pbiThread).start();
			
			//monitor.worked(2);
		}
		
        return new IProject[0];
	}
	
	private PostBuildInvokerThread pbiThread;
	
	private class PostBuildInvokerThread implements Runnable {
		
	    private boolean isBuilding = false;
	    
	    private boolean needRebuild = false;
	    
		private ConsoleLoggingStream cls;
		
		private IProgressMonitor monitor;
		
		PostBuildInvokerThread(ConsoleLoggingStream cls){
			this.cls = cls;
		}
		
		void setMonitor(IProgressMonitor monitor){
			this.monitor = monitor;
		}
		
		@Override
		public void run() {
			//Secure the lock
			synchronized(TwoStageBuilder.class){
				if(isBuilding){
					needRebuild = true;
					cls.info("Build deferred.");
					monitor.setCanceled(true);
					return;
				} else {
					isBuilding = true;
					needRebuild = false;
				}
			}
			
			boolean buildSuccessful = true;
			
//			try {
//				Thread.currentThread().sleep(5000);
//			} catch (InterruptedException e) {
//				e.printStackTrace();
//			}
			
			buildSuccessful = postbuildInvoker.postbuild(projectPath, cls, monitor, builder);
			
			//Failed build without retry
			if(!buildSuccessful){
				monitor.setCanceled(true);
				if(!needRebuild){
					cls.error("Build failed.");
				}
				//Release the lock
				synchronized(TwoStageBuilder.class){
					isBuilding = false;
				}
				return;
			}

			//A retry is needed
			if(needRebuild){
				//Reset the flags
				synchronized(TwoStageBuilder.class){
					isBuilding = false;
					needRebuild = false;
				}
				//cls.info("Deferred build starts.");//debug
				run();
			} else {
				//Release the lock
				synchronized(TwoStageBuilder.class){
					isBuilding = false;
				}
				//cls.info("Build done.");//debug
			}
			
		}
	}
}
