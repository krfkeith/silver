/*
 * Variables used:
 *   PKG_NAME
 *   LANG_NAME
 */
package @PKG_NAME@;

import ide.NIdeEnv;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Platform;
import org.eclipse.osgi.service.datalocation.Location;

import @PKG_NAME@.imp.builders.@LANG_NAME@Builder;

import edu.umn.cs.melt.ide.silver.property.ProjectProperties;

/**
 * Services managed for each project of @LANG_NAME@ in the workspace.
 * <p>
 * This class is used to get per-project properties and environment parameters,
 * which are required by most optional functions declared in Silver's IDE
 * declaration block.
 */
public class @LANG_NAME@Service {

	private Map<String, ProjectProperties> map;
	
	private Map<String, NIdeEnv> env = new HashMap<String, NIdeEnv>();
	
	private @LANG_NAME@Service(){
		if(map==null){
			map = new HashMap<String, ProjectProperties>();
		}
		if(env==null){
			env = new HashMap<String, NIdeEnv>();
		}
	}
	
	private final static @LANG_NAME@Service singleton = new @LANG_NAME@Service();
	
	public static @LANG_NAME@Service getInstance(){
		return singleton;
	}
	
	/**
	 * Get properties of project specified by given IProject instance.
	 * 
	 * @param project
	 * @return
	 */
	public ProjectProperties getProperties(IProject project){		
		String name = project.getName();
		ProjectProperties pp = map.get(name);
		if(pp==null){
			pp = ProjectProperties.getPropertyPersister(project.getLocation().toString());
			map.put(name, pp);
		}
		
		return pp;
	}
	
	/**
	 * Get environment of project specified by given IProject instance.
	 * 
	 * @param project
	 * @return
	 */
	public NIdeEnv getEnvironment(IProject project){
		String name = project.getName();
		NIdeEnv result = env.get(project.getName());
		
		if(result==null){
			env.put(name, result = makeEnv(name, project));
		}
		
		return result;
	}

	private NIdeEnv makeEnv(String projectName, IProject fProject) {
		IPath path = fProject.getLocation();
		
		String projectPath = path.toOSString();
		String generatedPath = path.toOSString() + "/" + SILVERBuilder.GEN_FOLDER;
		String platformPath = null;
		
		try {
			Location platform = Platform.getInstallLocation();
			File parent = new File(FileLocator.resolve(platform.getURL()).toURI());
			platformPath = parent.getAbsolutePath();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		NIdeEnv env = new ide.PmakeIdeEnv(projectName, projectPath, generatedPath, platformPath);
		
		return env;
	}
	
}

